program ::= stmt*

stmt ::= (let | print | scan | assign) ';'

let ::= 'let' <id> '=' expr

print ::= 'print' expr

scan ::= 'scan' <id>

assign ::= 'assign' <id> '=' expr

expr ::= muldiv (('+'|'-') muldiv)*

muldiv ::= primary (('*'|'/') primary)*

primary ::=
    | '-' primary
    | '(' expr ')'
    | <id>
    | <int>


// print -(-5) + 2;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


-----------DATA
section .text
	global _main
	extern _printf
	extern _scanf
section .data
	format_in: db "%d", 0
	format_out: db "<ID> = %d", 10, 0
	<...>
-----------/DATA
------------MAIN
_main:
	<...>
ret
-----------/MAIN
-----------LET
  integer_<ID>: times 4 db 0
----------/LET
------------SCAN
  push integer_<ID>
  push formatin
  call _scanf
  add esp, 8
-----------/SCAN
-----------PRINT
  push integer_<ID>
  push message
  call _printf
  add esp, 8
----------/PRINT
-------------ADD
??
add eax,ebx

------------/ADD
-------------SUB
??
sub eax,ebx

------------/SUB
-------------MUL
??
mul eax,ebx

------------/MUL
-------------DIV
??
div eax,ebx

------------/DIV

